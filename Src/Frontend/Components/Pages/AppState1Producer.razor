@using Application.StateManagement.Common
@using Application.StateManagement.Specific
@using Domain.States
@using MediatR
@rendermode InteractiveServer

<h3>Update State1</h3>
<div class="add-number-section">
    <div class="form-group">
        <label for="newNumber">Add Color:</label>
        <input @bind="input" id="newItem" class="form-control" placeholder="Enter text"/>
    </div>
    <button @onclick="AddNumber" class="action-button mt-2">Add to State</button>
</div>


@code {
protected override bool ShouldRender() => _shouldRender;
private bool _shouldRender = true;
    [Inject] private IMediator _mediator { get; init; }

    private string input = "Yellow";

    public async Task AddNumber() => AddNumber(0);

    public async Task AddNumber(uint attempts)
    {
        Console.WriteLine("Trigger 1");
        
        if (attempts > 100)
            throw new TooManyReattemptsException();
        
        var previousState1 = await _mediator.Send(new GetAppStateRequest<List<string>>());
        var newState1 = previousState1 with {  Value = previousState1.Value.Concat([input]).ToList() };
        try
        {
            await _mediator.Send(new SetAppStateRequest<List<string>>() { NewState = newState1, LastStateHash = previousState1.GetHashCode() });
        }
        catch (HashOutdatedException)
        {
            AddNumber(++attempts);
        }
    }

    protected override void OnAfterRender(bool firstRender)
    {
        Console.WriteLine("AFTER RENDER (APPSTATE1PRODUCER)");
        base.OnAfterRender(firstRender);
        _shouldRender = false;
    }


}